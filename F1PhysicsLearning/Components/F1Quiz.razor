@using F1PhysicsLearning.Services
@using F1PhysicsLearning.Models
@inject GameService GameService
@rendermode InteractiveServer

<div class="quiz-container">
    <div class="grid-position-indicator">
        <h3>@GameService.GetPositionDescription()</h3>
        <div class="position-bar">
            <div class="position-marker" style="left: @GetPositionPercentage()%"></div>
        </div>
        <div class="position-labels">
            <span>P1 üèÜ</span>
            <span>P20 üî¥</span>
        </div>
    </div>

    <div class="game-stats">
        <div class="stat-card">
            <span class="stat-label">Questions</span>
            <span class="stat-value">@GameService.GetGameState().QuestionsAnswered</span>
        </div>
        <div class="stat-card">
            <span class="stat-label">Accuracy</span>
            <span class="stat-value">@GameService.GetAccuracyPercentage()%</span>
        </div>
        <div class="stat-card">
            <span class="stat-label">Position</span>
            <span class="stat-value">P@(GameService.GetGameState().CurrentPosition)</span>
        </div>
    </div>

    @if (currentQuestion != null)
    {
        <div class="question-card">
            <div class="question-header">
                <span class="category-badge">@currentQuestion.Category</span>
                <span class="difficulty-badge difficulty-@currentQuestion.Difficulty">
                    @GetDifficultyText(currentQuestion.Difficulty)
                </span>
            </div>
            
            <h4 class="question-text">@currentQuestion.Text</h4>

            <div class="options-container">
                @for (int i = 0; i < currentQuestion.Options.Count; i++)
                {
                    int index = i; // Capture for closure
                    <button class="option-button @GetOptionClass(index)" 
                            @onclick="() => SelectAnswer(index)"
                            disabled="@(selectedAnswer.HasValue)">
                        <span class="option-letter">@GetOptionLetter(index)</span>
                        <span class="option-text">@currentQuestion.Options[index]</span>
                        @if (selectedAnswer.HasValue)
                        {
                            @if (index == currentQuestion.CorrectAnswerIndex)
                            {
                                <i class="bi bi-check-circle-fill correct-icon"></i>
                            }
                            else if (index == selectedAnswer.Value)
                            {
                                <i class="bi bi-x-circle-fill incorrect-icon"></i>
                            }
                        }
                    </button>
                }
            </div>

            @if (selectedAnswer.HasValue)
            {
                <div class="context-section">
                    <h5><i class="bi bi-lightbulb-fill"></i> Learn More:</h5>
                    <p class="context-text">@currentQuestion.Context</p>
                    <button class="btn btn-primary next-button" @onclick="NextQuestion">
                        Next Question <i class="bi bi-arrow-right"></i>
                    </button>
                </div>
            }
        </div>
    }
</div>

<style>
    .quiz-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 1rem;
    }

    .grid-position-indicator {
        background: linear-gradient(135deg, #2c3e50, #3498db);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
    }

    .position-bar {
        width: 100%;
        height: 8px;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 4px;
        position: relative;
        margin: 1rem 0;
    }

    .position-marker {
        position: absolute;
        top: -4px;
        width: 16px;
        height: 16px;
        background: #e74c3c;
        border-radius: 50%;
        border: 2px solid white;
        transition: left 0.3s ease;
    }

    .position-labels {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        opacity: 0.8;
    }

    .game-stats {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
        display: flex;
        flex-direction: column;
    }

    .stat-label {
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 0.5rem;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #2c3e50;
    }

    .question-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .category-badge {
        background: #3498db;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.8rem;
    }

    .difficulty-badge {
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.8rem;
        color: white;
    }

    .difficulty-1 { background: #27ae60; }
    .difficulty-2 { background: #f39c12; }
    .difficulty-3 { background: #e74c3c; }

    .question-text {
        font-size: 1.2rem;
        margin-bottom: 1.5rem;
        color: #2c3e50;
    }

    .options-container {
        margin-bottom: 1.5rem;
    }

    .option-button {
        width: 100%;
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

    .option-button:hover:not(:disabled) {
        background: #e3f2fd;
        border-color: #2196f3;
        transform: translateY(-1px);
    }

    .option-button:disabled {
        cursor: default;
    }

    .option-button.correct {
        background: #d4edda;
        border-color: #28a745;
    }

    .option-button.incorrect {
        background: #f8d7da;
        border-color: #dc3545;
    }

    .option-letter {
        background: #6c757d;
        color: white;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        font-weight: bold;
    }

    .option-text {
        flex: 1;
        text-align: left;
    }

    .correct-icon {
        color: #28a745;
        font-size: 1.2rem;
        margin-left: auto;
    }

    .incorrect-icon {
        color: #dc3545;
        font-size: 1.2rem;
        margin-left: auto;
    }

    .context-section {
        background: #f8f9fa;
        border-left: 4px solid #17a2b8;
        padding: 1.5rem;
        border-radius: 0 8px 8px 0;
        margin-top: 1.5rem;
    }

    .context-section h5 {
        color: #17a2b8;
        margin-bottom: 1rem;
    }

    .context-text {
        line-height: 1.6;
        margin-bottom: 1rem;
        color: #495057;
    }

    .next-button {
        background: linear-gradient(45deg, #28a745, #20c997);
        border: none;
        border-radius: 25px;
        padding: 0.75rem 1.5rem;
    }

    .next-button:hover {
        background: linear-gradient(45deg, #20c997, #28a745);
        transform: translateY(-1px);
    }
</style>

@code {
    private Question? currentQuestion;
    private int? selectedAnswer;

    protected override void OnInitialized()
    {
        currentQuestion = GameService.GetCurrentQuestion();
    }

    private void SelectAnswer(int answerIndex)
    {
        if (selectedAnswer.HasValue) return;

        selectedAnswer = answerIndex;
        GameService.AnswerQuestion(answerIndex);
        StateHasChanged();
    }

    private void NextQuestion()
    {
        selectedAnswer = null;
        
        if (!GameService.GetGameState().IsGameComplete)
        {
            GameService.LoadNextQuestion();
            currentQuestion = GameService.GetCurrentQuestion();
        }
        
        StateHasChanged();
    }

    private string GetOptionLetter(int index) => ((char)('A' + index)).ToString();

    private string GetOptionClass(int index)
    {
        if (!selectedAnswer.HasValue) return "";

        if (index == currentQuestion!.CorrectAnswerIndex)
            return "correct";
        
        if (index == selectedAnswer.Value)
            return "incorrect";

        return "";
    }

    private double GetPositionPercentage()
    {
        // P1 = 100%, P20 = 0%
        return Math.Max(0, Math.Min(100, (21 - GameService.GetGameState().CurrentPosition) * 5));
    }

    private string GetDifficultyText(int difficulty) => difficulty switch
    {
        1 => "Easy",
        2 => "Medium",
        3 => "Hard",
        _ => "Unknown"
    };
}