@page "/race-quiz"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Web
@using MotorsportsPhysics.Components.Pages
@using MotorsportsPhysics.Components.Shared
@inject IJSRuntime JS

<PageTitle>Race Quiz</PageTitle>

@if (!_configured)
{
  <div class="container mx-auto max-w-3xl px-4 sm:px-6 lg:px-8 py-10">
    <p class="text-gray-700">Loadingâ€¦</p>
  </div>
}
else
{
  <div class="container mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 py-8">
    <div class="mb-4 text-sm text-gray-600">
      <a class="text-primary hover:underline" href="/race-menu">Back to difficulty</a>
      <span class="mx-2">/</span>
      <span>Mode: <strong>@_label</strong></span>
    </div>
      @if (_showAnim)
      {
        @if (_isEasy)
        {
          <EasyRace @ref="_easyRace" QuestionAnswered="@_questionAnswered" AnsweredCount="@_answeredCount" />
        }
        else
        {
          <MediumRace QuestionAnswered="@_questionAnswered" AnsweredCount="@_answeredCount" />
        }
      }
    <CorneringQuiz StepMode="true"
                   ShowExplanation="@_showExplanation"
                   RaceMode="@_raceMode"
                   Timed="@_timed"
                   TimeLimitSeconds="@_timeLimit"
                   OnStepStarted="OnStepStarted"
                   OnAnswerStateChanged="OnAnswerStateChanged"
                   OnAnsweredCountChanged="OnAnsweredCountChanged" />
  </div>
}

@code {
  [Inject] public NavigationManager Nav { get; set; } = default!;

  private bool _configured = false;
  private bool _showExplanation = true;
  private bool _raceMode = false;
  private bool _timed = false;
  private int _timeLimit = 90;
  private string _label = "";
  private bool _isEasy = false;
    private bool _showAnim = false;
  private EasyRace? _easyRace;
  private bool _questionAnswered = false;
  private int _answeredCount = 0;


  protected override void OnInitialized()
  {
    var uri = Nav.ToAbsoluteUri(Nav.Uri);
    var query = QueryHelpers.ParseQuery(uri.Query);
    var difficulty = query.TryGetValue("difficulty", out var v) ? v.ToString() : "easy";
    switch (difficulty.ToLowerInvariant())
    {
      case "easy":
        _showExplanation = true;
        _raceMode = false;
        _timed = false;
        _timeLimit = 0;
        _label = "Easy";
        _isEasy = true;
        _showAnim = true;
        break;
      case "medium":
        _showExplanation = true;
        _raceMode = true;
        _timed = false;
        _timeLimit = 0;
        _label = "Medium";
        _isEasy = false;
          _showAnim = true;
        break;
      case "high":
        _showExplanation = false;
        _raceMode = true;
        _timed = true;
        _timeLimit = 120;
        _label = "High";
        _isEasy = false;
          _showAnim = true;
        break;
      default:
        _showExplanation = true;
        _raceMode = false;
        _timed = false;
        _timeLimit = 0;
        _label = "Easy";
        _isEasy = true;
        _showAnim = true;
        break;
    }
    _configured = true;
  }

  // RaceTrack handles its own JS init
  private async Task OnStepStarted(int step)
  {
    if (_isEasy && _easyRace is not null)
    {
      await _easyRace.StartStepAsync(step);
    }
  }

  private Task OnAnswerStateChanged(bool answered)
  {
    _questionAnswered = answered;
    StateHasChanged();
    return Task.CompletedTask;
  }

  private Task OnAnsweredCountChanged(int count)
  {
    _answeredCount = count;
    StateHasChanged();
    return Task.CompletedTask;
  }
}
