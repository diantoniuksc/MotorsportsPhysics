@page "/track"

@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IJSRuntime JS

<PageTitle>Track Simulator</PageTitle>

<h1>Track Simulator</h1>

<div class="controls">
    <button class="btn" @onclick="Play">Play</button>
    <button class="btn" @onclick="Pause">Pause</button>
    <label style="margin-left:1rem">Speed:
    <input type="range" min="20" max="400" step="5" @bind="Speed" @bind:event="oninput" />
    <span>@speed px/s</span>
    </label>
    <label style="margin-left:1rem">
        <input type="checkbox" @bind="showPath" /> Show path
    </label>
    <button class="btn" style="margin-left:1rem" @onclick="Reset">Reset</button>
    <p class="muted">Drop your own images in <code>wwwroot/images/track.png</code> and <code>wwwroot/images/car.png</code> then tweak the path below.</p>
    <p class="muted">Tip: Draw the centerline in any vector tool and copy its SVG path "d" here.</p>
    
</div>

<svg @ref="svg" viewBox="0 0 847 555" preserveAspectRatio="xMidYMid meet" style="width:100%;max-width:960px;height:auto;border:1px solid #ccc;background:#9cd04a">
    <!-- Track raster image underneath -->
    <image href="images/track.png" x="0" y="0" width="847" height="555" preserveAspectRatio="none"></image>

    <!-- Optional: the path the car will follow (toggle visibility for debugging) -->
    <path id="racePath" d="@pathD"
          fill="none"
          stroke="#00bcd4"
          stroke-width="@((showPath ? 6 : 0))"
          stroke-dasharray="10 8"/>

    <!-- The car sprite that will be moved/rotated by JS -->
    <image id="carSprite" href="images/car.png" width="100" height="100" x="280" y="500" preserveAspectRatio="xMidYMid meet" />
</svg>

@code {
    private ElementReference svg;
    private IJSObjectReference? _module;
    private IJSObjectReference? _anim;
    private int speed = 140; // pixels per second along the path length
    private bool showPath = false;

    // NOTE: Replace this with a path that matches your track image.
    // You can get it by drawing a path in a vector tool (Figma/Inkscape) over the centerline,
    // then copying the path's "d" attribute. The viewBox here is 847x555 to match the screenshot.
    private string pathD =
        "M 720 500 C 650 520 580 523 510 520 C 420 516 330 505 260 490 C 180 472 120 440 95 400 C 70 360 80 310 130 285 C 175 263 236 270 286 288 C 335 305 380 340 415 350 C 455 362 500 352 520 320 C 540 288 530 245 505 210 C 475 166 420 145 360 138 C 300 131 245 144 215 165 C 180 190 170 220 180 265 C 188 303 205 329 245 350 C 290 374 355 374 390 390 C 435 411 450 451 440 490 C 430 528 390 545 350 545 C 300 545 250 528 205 510 C 150 487 95 463 65 430 C 35 397 30 355 45 320 C 60 285 95 255 140 235 C 200 208 280 205 350 215 C 420 225 480 250 540 260 C 600 270 675 260 710 230 C 750 197 758 160 748 130 C 734 88 695 58 650 44 C 595 26 520 30 470 40 C 420 50 370 73 335 105 C 300 137 280 178 282 210 C 285 255 318 290 360 310 C 410 334 475 342 520 350 C 585 362 640 380 685 405 C 721 425 746 452 758 480 C 770 508 762 515 720 500 z";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
    _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/trackSim.js");
        _anim = await _module.InvokeAsync<IJSObjectReference>("init", svg, new { speed });
    }

    private async Task Play()
    {
        if (_anim is not null)
            await _anim.InvokeVoidAsync("play");
    }

    private async Task Pause()
    {
        if (_anim is not null)
            await _anim.InvokeVoidAsync("pause");
    }

    private async Task Reset()
    {
        if (_anim is not null)
            await _anim.InvokeVoidAsync("reset");
    }

    private async Task OnSpeedChanged(int value)
    {
        if (_anim is not null)
            await _anim.InvokeVoidAsync("setSpeed", value);
    }

    private int Speed
    {
        get => speed;
        set
        {
            if (speed == value) return;
            speed = value;
            _ = OnSpeedChanged(speed);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_anim is not null)
        {
            try { await _anim.InvokeVoidAsync("dispose"); } catch { }
        }
        if (_module is not null)
        {
            try { await _module.DisposeAsync(); } catch { }
        }
    }
}
