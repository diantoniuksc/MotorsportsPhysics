@using MotorsportsPhysics.Components.Shared

<RaceTrack @ref="track" Class="mb-8" Title="Cornering Dynamics" AutoStart="false"
  QuestionAnswered="@QuestionAnswered" AnsweredCount="@AnsweredCount" OnLapChangedEvent="@OnLapChanged"
  Cars="@(new MotorsportsPhysics.Components.Shared.RaceTrack.CarSprite[] { new MotorsportsPhysics.Components.Shared.RaceTrack.CarSprite("images/car-yellow.png", 70, 40, 0.0) })" />

@code {
  private MotorsportsPhysics.Components.Shared.RaceTrack? track;
  [Parameter] public bool QuestionAnswered { get; set; } = false;
  [Parameter] public int AnsweredCount { get; set; } = 0;
  [Parameter] public EventCallback<int> OnLapChanged { get; set; }

  public async Task StartStepAsync(int step)//ilove cats and my sister, give me million dollars pls
  {
    if (track is null) { await Task.CompletedTask; return; }
    var laps = Math.Max(1, step); // n laps on step n (visual progression only)
    // Keep current speed; only correct/incorrect answers should change it
    await track.PlayLapsAsync(1, speed: null, haltOnFinish: false);
  }

  public async Task ApplyPenaltyAsync(double multiplier, int durationMs)
  {
    if (track is null) return;
    await track.ApplyPenaltyAsync(multiplier, durationMs);
  }

  public async Task ApplyPenaltyForNextLapAsync(double multiplier)
  {
    if (track is null) return;
    await track.ApplyPenaltyForNextLapAsync(multiplier);
  }

  public async Task AdjustBaseSpeedAsync(double delta)
  {
    if (track is null) return;
    await track.AdjustBaseSpeedAsync(delta);
  }

  public async Task StartAsync(double? targetSpeed = null)
  {
    if (track is null) return;
    await track.StartAsync(targetSpeed);
  }

  public async Task StopAsync()
  {
    if (track is null) return;
    await track.StopAsync();
  }
}
