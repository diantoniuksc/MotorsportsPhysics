@using MotorsportsPhysics.Components.Shared

<RaceTrack @ref="track" Class="mb-8" Title="Cornering Dynamics" PathTranslateX="50" AutoStart="false" QuestionAnswered="@QuestionAnswered" AnsweredCount="@AnsweredCount" OnLapChangedEvent="@OnLapChanged"
  Cars="@(new RaceTrack.CarSprite[] {
    new RaceTrack.CarSprite("images/car-yellow.png", 70, 40, 0.00),
    new RaceTrack.CarSprite("images/car-blue.png",   70, 40, 0.20),
    new RaceTrack.CarSprite("images/car-green.png",  70, 40, 0.40),
    new RaceTrack.CarSprite("images/car-purple.png", 70, 40, 0.60)
  })" />

@code {
  private RaceTrack? track;
  [Parameter] public bool QuestionAnswered { get; set; } = false;
  [Parameter] public int AnsweredCount { get; set; } = 0;
  [Parameter] public EventCallback<int> OnLapChanged { get; set; }

  public async Task StartAsync(double? targetSpeed = null)
  {
    if (track is null) return;
    await track.StartAsync(targetSpeed);
  }

  public async Task StopAsync()
  {
    if (track is null) return;
    await track.StopAsync();
  }

  public async Task AdjustBaseSpeedAsync(double delta)
  {
    if (track is null) return;
    await track.AdjustBaseSpeedAsync(delta);
  }

  public async Task ApplyPenaltyForNextLapAsync(double multiplier)
  {
    if (track is null) return;
    await track.ApplyPenaltyForNextLapAsync(multiplier);
  }
}
